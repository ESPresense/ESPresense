; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = esp32
build_cache_dir = ~/.buildcache
extra_configs = platformio_override.ini

[common]
lib_ldf_mode = chain
lib_compat_mode = strict
check_tool = cppcheck, clangtidy
check_flags = clangtidy: --config-file=.clang-tidy
check_skip_packages = yes
platform = https://github.com/tasmota/platform-espressif32/releases/download/2023.07.00/platform-espressif32.zip
platform_packages =
debug_build_flags = -Og -ggdb3 -g3 -DDEBUG_TLS_MEM
build_flags =
  -free
  -fipa-pta
  -fno-exceptions
  -flto=auto
  -fpermissive
  -Wall
  -Wextra
  -Wformat=2
  -Wno-ignored-qualifiers
  -Wno-switch-unreachable
  -Wno-stringop-overflow
  -Wformat-truncation
  -D CONFIG_BT_NIMBLE_TASK_STACK_SIZE=5632
  -D CONFIG_BT_NIMBLE_HOST_TASK_STACK_SIZE=5632
  -D SCAN_TASK_STACK_SIZE=2562
  -D ARDUINO_LOOP_STACK_SIZE=6500
  -D MQTT_MIN_FREE_MEMORY=12192
  -D CONFIG_ASYNC_TCP_USE_WDT=0
  -D CONFIG_BT_NIMBLE_MSYS1_BLOCK_COUNT=20
  -D BLE_GATTC_UNRESPONSIVE_TIMEOUT_MS=2000
;	-D CONFIG_BT_NIMBLE_DEBUG=1
;	-D CONFIG_NIMBLE_CPP_LOG_LEVEL=4
;	-D CONFIG_NIMBLE_CPP_ENABLE_GAP_EVENT_CODE_TEXT=1
;	-D CONFIG_NIMBLE_CPP_ENABLE_RETURN_CODE_TEXT=1
; -D CHECK_FOR_UPDATES_INTERVAL=1
build_unflags =
  -Wswitch-unreachable
  -Wstringop-overflow
  -Wincompatible-pointer-types
  -Wnonnull-compare
  -Wformat-nonliteral
  -fexceptions
  -fno-lto
framework = arduino
lib_deps =
  ESP32Async/AsyncTCP
  ESP32Async/ESPAsyncWebServer
  https://github.com/ESPresense/HeadlessWiFiSettings.git#v1.1.7
  h2zero/NimBLE-Arduino@^2.2.3
  marvinroger/AsyncMqttClient@^0.9.0
  bblanchon/ArduinoJson@^6.21.3
  kitesurfer1404/WS2812FX@^1.4.2
board_build.partitions = partitions_singleapp.csv
monitor_speed = 115200
monitor_filters = esp32_exception_decoder, time
upload_speed = 1500000
extra_scripts = update_ts.py

[esp32]
extends = common
board = esp32dev
debug_tool = esp-prog
build_flags =
  -mtarget-align
  -D ARDUINO_ARCH_ESP32
  -D CONFIG_BT_NIMBLE_PINNED_TO_CORE=1
  -D REPORT_PINNED_TO_CORE=1
  -D CONFIG_USE_ETHERNET
  ${common.build_flags}

[esp32c3]
extends = common
board = esp32-c3-devkitm-1
board_build.flash_mode = dio
build_flags =
  -D ARDUINO_ARCH_ESP32
  -D ARDUINO_ARCH_ESP32C3
  -D CONFIG_IDF_TARGET_ESP32C3
  -D CONFIG_BT_NIMBLE_PINNED_TO_CORE=0
  -D REPORT_PINNED_TO_CORE=0
  -D ESP32C3
  ${common.build_flags}

[esp32c3-cdc]
extends = esp32c3
build_flags =
  -D ARDUINO_USB_MODE=1
  -D ARDUINO_USB_CDC_ON_BOOT=1
  ${esp32c3.build_flags}

[esp32s3]
extends = common
board = dfrobot_firebeetle2_esp32s3
build_flags =
  -D ARDUINO_ARCH_ESP32
  -D ARDUINO_ARCH_ESP32S3
  -D CONFIG_IDF_TARGET_ESP32S3
  -D ARDUINO_USB_MODE=1
  -D REPORT_PINNED_TO_CORE=1
  -D ESP32S3
  ${common.build_flags}

[esp32s3-cdc]
extends = esp32s3
build_flags =
  -D ARDUINO_USB_MODE=1
  -D ARDUINO_USB_CDC_ON_BOOT=1
  ${esp32s3.build_flags}

[sensors]
lib_deps =
  adafruit/Adafruit Unified Sensor@^1.1.13
  adafruit/Adafruit AHTX0@^2.0.5
  adafruit/Adafruit BME280 Library@^2.2.2
  adafruit/Adafruit BMP085 Library@^1.2.1
  adafruit/Adafruit BMP280 Library@^2.6.8
  adafruit/Adafruit TSL2561@^1.1.0
  starmbi/hp_BH1750@^1.0.0
  beegee-tokyo/DHT sensor library for ESPx@^1.19
  sparkfun/SparkFun SGP30 Arduino Library@^1.0.5
  Sensirion/Sensirion I2C SCD4x@^1.0.0
  sensirion/arduino-sht@^1.2.2
  paulstoffregen/OneWire@^2.3.7
  milesburton/DallasTemperature@^3.11.0

[env:esp32]
extends = esp32
lib_deps =
  ${esp32.lib_deps}
  ${sensors.lib_deps}
build_flags =
	-D CORE_DEBUG_LEVEL=1
  -D FIRMWARE='"esp32"'
  -D SENSORS
  ${esp32.build_flags}

[env:esp32c3]
extends = esp32c3
lib_deps =
  ${esp32c3.lib_deps}
  ${sensors.lib_deps}
build_flags =
	-D CORE_DEBUG_LEVEL=1
  -D FIRMWARE='"esp32c3"'
  -D SENSORS
  ${esp32c3.build_flags}

[env:esp32c3-cdc]
extends = esp32c3-cdc
lib_deps =
  ${esp32c3.lib_deps}
  ${sensors.lib_deps}
build_flags =
	-D CORE_DEBUG_LEVEL=1
  -D FIRMWARE='"esp32c3-cdc"'
  -D SENSORS
  ${esp32c3-cdc.build_flags}

[env:esp32s3]
extends = esp32s3
lib_deps =
  ${esp32s3.lib_deps}
  ${sensors.lib_deps}
build_flags =
	-D CORE_DEBUG_LEVEL=1
  -D FIRMWARE='"esp32s3"'
  -D SENSORS
  ${esp32s3.build_flags}

[env:esp32s3-cdc]
extends = esp32s3-cdc
lib_deps =
  ${esp32s3.lib_deps}
  ${sensors.lib_deps}
build_flags =
	-D CORE_DEBUG_LEVEL=1
  -D FIRMWARE='"esp32s3-cdc"'
  -D SENSORS
  ${esp32s3-cdc.build_flags}

[env:esp32-verbose]
extends = esp32
lib_deps =
  ${esp32.lib_deps}
  ${sensors.lib_deps}
build_flags =
  -D CORE_DEBUG_LEVEL=2
  -D FIRMWARE='"esp32-verbose"'
  -D VERBOSE
  -D SENSORS
  ${esp32.build_flags}

[env:esp32c3-verbose]
extends = esp32c3
lib_deps =
  ${esp32.lib_deps}
  ${sensors.lib_deps}
build_flags =
  -D CORE_DEBUG_LEVEL=2
  -D FIRMWARE='"esp32c3-verbose"'
  -D VERBOSE
  -D SENSORS
  ${esp32c3.build_flags}

[env:esp32s3-verbose]
extends = esp32s3
lib_deps =
  ${esp32s3.lib_deps}
  ${sensors.lib_deps}
build_flags =
  -D CORE_DEBUG_LEVEL=2
  -D FIRMWARE='"esp32s3-verbose"'
  -D VERBOSE
  -D SENSORS
  ${esp32s3.build_flags}

[env:m5stickc]
extends = esp32
board = m5stick-c
lib_deps =
  https://github.com/ESPresense/TFT_eSPI.git
  https://github.com/ESPresense/TB_Display.git
  ${esp32.lib_deps}
  ${sensors.lib_deps}
build_flags =
	-D CORE_DEBUG_LEVEL=1
  -D TFT_FONT=1
  -D M5STICK
  -D FIRMWARE='"m5stickc"'
  -D SENSORS
  ${esp32.build_flags}

[env:m5stickc-plus]
extends = esp32
board = m5stick-c
lib_deps =
  https://github.com/ESPresense/TFT_eSPI.git
  https://github.com/ESPresense/TB_Display.git
  ${esp32.lib_deps}
  ${sensors.lib_deps}
build_flags =
	-D CORE_DEBUG_LEVEL=1
  -D TFT_FONT=2
  -D M5STICK
  -D PLUS
  -D FIRMWARE='"m5stickc-plus"'
  -D SENSORS
  ${esp32.build_flags}

[env:m5atom]
extends = esp32
board = m5stack-atom
lib_deps =
  ${esp32.lib_deps}
  ${sensors.lib_deps}
build_flags =
	-D CORE_DEBUG_LEVEL=1
  -D M5ATOM
  -D MATRIX
  -D FIRMWARE='"m5atom"'
  -D SENSORS
  ${esp32.build_flags}

[env:macchina-a0]
extends = esp32
lib_deps =
  ${esp32.lib_deps}
  ${sensors.lib_deps}
build_flags =
	-D CORE_DEBUG_LEVEL=1
  -D MACCHINA_A0
  -D FIRMWARE='"macchina-a0"'
  -D SENSORS
  ${esp32.build_flags}
